# from flask_babel import _, lazy_gettext as _l
from flask_wtf import FlaskForm
from wtforms import (EmailField, PasswordField, SelectField, StringField,
                     TextAreaField, IntegerField, BooleanField, RadioField,
                     )
from wtforms.validators import DataRequired, Email, EqualTo, Length

from src.accounts.models import User

et = [1, 2]
comp = ["", ""]
uch = []
dct = {
    ("1", "Съемка и монтаж", 46):
      {
        ("1.1", "Наличие базовых элементов и соответствие техническим требованиям", 24):
          {
            ("3", "Наличие лайфа", 4): {"да": 4, "нет": 0},
            ("4", "Наличие стендапа", 4): {"да": 4, "нет": 0},
            ("5", "Наличие голоса за кадром", 4): {"да": 4, "нет": 0},
            ("6", "Наличие синхрона", 4): {"да": 4, "нет": 0},
            ("7", "Формат: МР4, avi", 1): {"да": 1, "нет": 0},
            ("8", "Кодек сжатия: xViD, H.264, DivX", 1): {"да": 1, "нет": 0},
            ("9", "Соотношение сторон 16:9", 1): {"да": 1, "нет": 0},
            ("10", "Качество HD 720р или FHD1080р", 1): {"да": 1, "нет": 0},
            ("11", "Качество съёмки. Фокус.", 1): {"да": 1, "нет": 0},
            ("12", "Качество съемки. Стабилизация.", 1): {"да": 1, "нет": 0},
            ("13", "Качество съемки. Горизонт.", 1): {"да": 1, "нет": 0},
            ("14", "Качество съемки. Освещение.", 1): {"да": 1, "нет": 0},
          },
        ("1.2", "Монтаж репортажа", 22):
          {
            ("15", "Наличие спец-эффектов", 8): {"от 3 спецэффектов": 8, "1-2 спецэффекта": 6, "спецэффекты отсутствуют": 0},
            ("16", "Разнообразие планов (общий, крупный, средний)", 6): {"4 плана": 6, "1-3 плана": 4},
            ("17", "Монтажность планов (соблюдение правил монтажа)", 3): {"да": 3, "нет": 0},
            ("18", "Звук. Отсутствует рассинхрон.", 1): {"да": 1, "нет": 0},
            ("19", "Звук. Наложение.", 1): {"отсутствует наложение одного звука на другой": 1, "есть наложение одного звука на другой": 0},
            ("20", "Звук. Шумы.", 0.5): {"отсутствует посторонний шум на лайфах": 0.5, "есть посторонний шум на лайфах": 0},
            ("21", "Звук. Перегруз.", 0.5): {"отсутствует перегруз по звуку": 0.5, "есть посторонний шум на лайфах": 0},
            ("22", "Хронометраж до 2 минут", 2): {"да": 2, "нет": 0},
          },
      },
    ("2", "Текст", 29):
      {
        ("2.1", "Живость, образность, широта и разнообразие словарного запаса, отсутствие штампов и шаблонов", 10):
          {
            ("23", "Техника речи (четкость, интонация, темп речи, логические паузы)", 2): {"да": 2, "нет": 0},
            ("24", "Живость, образность", 2): {"да": 2, "нет": 0},
            ("25", "Отсутствие повторов в тексте", 2): {"да": 2, "нет": 0},
            ("26", "Отсутствие штампов и шаблонов", 2): {"да": 2, "нет": 0},
            ("27", "Отсутствие канцеляризмов", 2): {"да": 2, "нет": 0},
          },
        ("2.2", "Работа с источниками информации", 9):
          {
            ("28", "Верификация информации", 5): {"да": 5, "нет": 0},
            ("29", "Работа со статистическими данными", 2): {"да": 2, "нет": 0},
            ("30", "Наличие ссылок на источники информации", 2): {"да": 2, "нет": 0},
          },
        ("2.3", "Владение нормами устной и письменной речи (орфография и произношение)", 10):
          {
            "отсутствие всех видов ошибок": 10, "наличие 1-2 ошибок": 8, "наличие 3-4 ошибок": 6, "наличие 5-6 ошибок": 4, "наличие 7-8 ошибок": 2, "наличие более 8 ошибок": 0,
          },
      },
    ("3", "Качество синхронов", 5):
      {
        ("3.1", "Связь синхрона с закадровым текстом", 2):
          {
            "да": 2, "нет": 0,
          },
        ("3.2", "Информационная насыщенность текста (полнота ответа, наличие фактов)", 3):
          {
            "да": 3, "нет": 0,
          },
      }
    ("4", "Целостность репортажа", 20):
      {
        ("4.1", "Оригинальность при раскрытии темы", 5):
          {1: 1, 2: 2, 3: 3, 4: 4, 5: 5},
        ("4.2", "Единство и связь между всеми элементами (стендап; синхроны; ГЗК; лайфы) репортажа", 10):
          {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 8, 8: 8, 9: 9, 10: 10},
        ("4.3", "Полнота раскрытия заявленной темы", 5):
          {1: 1, 2: 2, 3: 3, 4: 4, 5: 5},
      }
    }

<p>Этап - Компетенция - Список участников - Оценочный лист участника</p>
<p>Участник №</p>
<p>1. Съемка и монтаж (0-46 баллов)</p>
<p>1.1.  (24 балла)</p>
<p>3.  * (да - 4 балла, нет - 0 баллов)
  Отметьте только один овал. 0 4</p>
<p>Наличие стендапа
  4. Отметьте только один овал. 0 4</p>
  <p>37. Введите комментарий, если считаете это необходимым</p>



class DeForm(FlaskForm):
    d = EmailField("Email", validators=[DataRequired(), Email()])
    e = PasswordField("Password", validators=[DataRequired()])
    """Динамическое создание форм из JSON-данных"""


class RegisterForm(FlaskForm):
    name = StringField("Имя пользователя", validators=[DataRequired()])
    role = SelectField("Роль", choices=[('exp', 'Эксперт'), ('ope', 'Оператор по работе с экспертами'), ('adm', 'Администратор')])
    email = EmailField(
        "Email", validators=[DataRequired(), Email(message=None), Length(min=4, max=45)]
    )
    password = PasswordField(
        "Password", validators=[DataRequired(), Length(min=6, max=25)]
    )
    confirm = PasswordField(
        "Repeat password",
        validators=[
            DataRequired(),
            EqualTo("password", message="Passwords must match."),
        ],
    )

    def validate(self, extra_validators=None):
        initial_validation = super(RegisterForm, self).validate(extra_validators)
        if not initial_validation:
            return False
        user = User.query.filter_by(email=self.email.data).first()
        if user:
            self.email.errors.append("Email already registered")
            return False
        if self.password.data != self.confirm.data:
            self.password.errors.append("Passwords must match")
            return False
        return True
