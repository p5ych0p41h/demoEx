DCT = {
  ("1", "Съемка и монтаж", 46): {
    (
      "1.1",
      "Наличие базовых элементов и соответствие техническим требованиям",
      24,
    ): {
      ("3", "Наличие лайфа", 4): [("да", 4), ("нет", 0)],
      ("4", "Наличие стендапа", 4): [("да", 4), ("нет", 0)],
      ("5", "Наличие голоса за кадром", 4): [("да", 4), ("нет", 0)],
      ("6", "Наличие синхрона", 4): [("да", 4), ("нет", 0)],
      ("7", "Формат: МР4, avi", 1): [("да", 1), ("нет", 0)],
      ("8", "Кодек сжатия: xViD, H.264, DivX", 1): [("да", 1), ("нет", 0)],
      ("9", "Соотношение сторон 16:9", 1): [("да", 1), ("нет", 0)],
      ("10", "Качество HD 720р или FHD1080р", 1): [("да", 1), ("нет", 0)],
      ("11", "Качество съёмки. Фокус.", 1): [("да", 1), ("нет", 0)],
      ("12", "Качество съемки. Стабилизация.", 1): [("да", 1), ("нет", 0)],
      ("13", "Качество съемки. Горизонт.", 1): [("да", 1), ("нет", 0)],
      ("14", "Качество съемки. Освещение.", 1): [("да", 1), ("нет", 0)],
    },
    ("1.2", "Монтаж репортажа", 22): {
      ("15", "Наличие спец-эффектов", 8): [
        ("от 3 спецэффектов", 8),
        ("1-2 спецэффекта", 6),
        ("спецэффекты отсутствуют", 0),
      ],
      ("16", "Разнообразие планов (общий, крупный, средний)", 6): [
        ("4 плана", 6),
        ("1-3 плана", 4),
      ],
      ("17", "Монтажность планов (соблюдение правил монтажа)", 3): [
        ("да", 3),
        ("нет", 0),
      ],
      ("18", "Звук. Отсутствует рассинхрон.", 1): [("да", 1), ("нет", 0)],
      ("19", "Звук. Наложение.", 1): [
        ("отсутствует наложение одного звука на другой", 1),
        ("есть наложение одного звука на другой", 0),
      ],
      ("20", "Звук. Шумы.", 0.5): [
        ("отсутствует посторонний шум на лайфах", 0.5),
        ("есть посторонний шум на лайфах", 0),
      ],
      ("21", "Звук. Перегруз.", 0.5): [
        ("отсутствует перегруз по звуку", 0.5),
        ("есть посторонний шум на лайфах", 0),
      ],
      ("22", "Хронометраж до 2 минут", 2): [("да", 2), ("нет", 0)],
    },
  },
}


def _test_grade():
    """Подсчет, проверка равенства количества баллов в разделах и подразделах
    """
    grad_up = 0
    grad_mid = 0
    for key, val in DCT.items():
        grad_up += key[-1]
        for kk, vv in val.items():
            grad_mid += kk[-1]
    return grad_up, grad_mid


SAVEDATA = False
if SAVEDATA:
    import yaml
    YAML_FILENAME = "forms_data.yaml"
    with open(YAML_FILENAME, 'w') as file:
        documents = yaml.dump(DCT, file, allow_unicode=True)


def recu(head, dat, lev=1):
    """Recursive function for doing everything alright"""
    if isinstance(dat, dict):
        for key, val in dat.items():
            if isinstance(val, dict):
                print(f"<h{lev}>{key[0]}. {key[1]}, ({key[2]} баллов)</h{lev}>")
                recu(key, val, lev=lev+1)
            elif isinstance(val, list):
                # Останов, форма choices=[(4, 'Да'), (0, 'Нет')]
                # print(f"RadioField(<h{lev}>{head[0]}. {head[1]}, ({head[2]} баллов)</h{lev}>, choices=[({key}, {val})]")
                print(f"RadioField(<h{lev}>{key[0]}. {key[1]}, ({key[2]} баллов)</h{lev}>, choices={val}")


if __name__ == "__main__":
    dat = DCT
    recu("", dat)
